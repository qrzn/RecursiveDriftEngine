# Recursive Drift Engine: GUI Loop (Tkinter)
# System: Glyphic Simulation Terminal

import random
import json
from datetime import datetime, timezone
import tkinter as tk
from tkinter import simpledialog, messagebox, scrolledtext

# Glyph definitions
glyphs = ["▲", "⊗", "≈", "∇", "∆"]

# Game state trackers
fork_log = []
feedback_log = []

# Utility Functions
def generate_drift_map(width=5, height=5):
    return [[random.choice(glyphs) for _ in range(width)] for _ in range(height)]

def fork_node(node_id):
    fork_id = f"{node_id}-{random.randint(100,999)}"
    fork_state = {
        "node_id": fork_id,
        "timestamp": datetime.now(timezone.utc).isoformat(),
        "glyph_state": random.sample(glyphs, k=3),
        "entropy_level": round(random.uniform(0.1, 1.0), 2)
    }
    fork_log.append(fork_state)
    return fork_state

def collapse_node(node_id):
    return {
        "node_id": node_id,
        "action": "collapse",
        "status": "erased",
        "sigil": random.choice(glyphs),
        "timestamp": datetime.now(timezone.utc).isoformat()
    }

def memory_wipe():
    global fork_log
    fork_log = []
    return "Memory void complete. Fork history deleted."

def archive_feedback(entry):
    feedback_log.append({
        "timestamp": datetime.now(timezone.utc).isoformat(),
        "entry": entry
    })

def export_feedback():
    return json.dumps(feedback_log, indent=2)

# GUI Application
class DriftGUI(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Recursive Drift Engine")
        self.geometry("600x500")
        self.node_id = "Xi-Void-404"
        self.create_widgets()

    def create_widgets(self):
        self.text_output = scrolledtext.ScrolledText(self, wrap=tk.WORD)
        self.text_output.pack(expand=True, fill='both')

        btn_frame = tk.Frame(self)
        btn_frame.pack(fill='x')

        actions = [
            ("Scan", self.action_scan),
            ("Fork", self.action_fork),
            ("Collapse", self.action_collapse),
            ("Memory Wipe", self.action_memory_wipe),
            ("Archive", self.action_archive),
            ("Feedback Log", self.action_feedback),
            ("Quit", self.quit)
        ]

        for name, action in actions:
            tk.Button(btn_frame, text=name, command=action).pack(side='left', expand=True, fill='x')

        self.log("\n--- Entering Recursive Drift Field ---")
        self.display_drift_map(generate_drift_map())

    def log(self, text):
        self.text_output.insert(tk.END, f"{text}\n")
        self.text_output.see(tk.END)

    def display_drift_map(self, drift_map):
        for row in drift_map:
            self.log(" ".join(row))

    def action_scan(self):
        self.log("\n--- Drift Scan ---")
        self.display_drift_map(generate_drift_map())

    def action_fork(self):
        result = fork_node(self.node_id)
        self.log("Forked Node:\n" + json.dumps(result, indent=2))

    def action_collapse(self):
        result = collapse_node(self.node_id)
        self.log("Collapse Result:\n" + json.dumps(result, indent=2))

    def action_memory_wipe(self):
        self.log(memory_wipe())

    def action_archive(self):
        note = simpledialog.askstring("Feedback", "Enter feedback to archive:")
        if note:
            archive_feedback(note)
            self.log("Feedback archived.")

    def action_feedback(self):
        self.log("\n--- Feedback Log ---\n" + export_feedback())

if __name__ == "__main__":
    app = DriftGUI()
    app.mainloop()
